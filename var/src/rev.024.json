{
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "https://github.com/LeShaunJ/ops-schema/blob/main/var/src/rev.024.json",
  "title": "ops.yaml (rev. 022)",
  "type": "object",
  "description": "Confirguration for `ops`.",
  "markdownDescription": "Confirguration for [`ops`](https://github.com/nickthecook/ops).\n\n```yaml\nrevision: ...\nmin_version: ...\nforwards: ...\ndependencies: ...\nhooks: ...\nactions: ...\noptions: ...\n```\n",
  "additionalProperties": false,
  "propertyNames": {
    "enum": [
      "actions",
      "dependencies",
      "forwards",
      "hooks",
      "min_version",
      "options",
      "revision"
    ]
  },
  "properties": {
    "revision": {
      "title": "Revision",
      "description": "A number representing a schema version that the `ops.yml` will be validated against.\n\u2014 It is not the same as `min_version` (`0.12.0` and onward); though they are linked, as the versions one can specify in `min_version` are governed by the chosen revision.\n\u2014 If unset, the `ops.yml` file will be validated against the most recent version of `ops`.\n",
      "markdownDescription": "A number representing a schema version that the `ops.yml` will be validated against:\n* It _is not_ the same as `min_version` (_`0.12.0` and onward_); though they are linked, as the versions one can specify in `min_version` are governed by the chosen revision.\n* If unset, the `ops.yml` file will be validated against the most recent version of `ops`.\n",
      "type": "integer",
      "minimum": 1,
      "default": 36
    },
    "actions": {
      "title": "ActionMap",
      "description": "A collection of commands to run via `ops`. If the first argument to `ops` is not a `builtin`, `ops` will look for an action with that name.",
      "markdownDescription": "A collection of commands to run via `ops`. If the first argument to `ops` is not a `builtin`, `ops` will look for an action with that name.\n\n_For more information, see the [Actions](https://github.com/nickthecook/ops/blob/main/docs/actions.md) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "object",
      "minProperties": 1,
      "default": {
        "myaction": "echo \"hello, world\""
      },
      "patternProperties": {
        "^[\\w-]+$": {
          "oneOf": [
            {
              "description": "A simple command, or\u2014though not recommended\u2014a script, to run. Only use this pattern unless the command's intent is easy to decipher.",
              "markdownDescription": "A simple command, or\u2014*though, not recommended*\u2014a script, to run. Only use this pattern unless the command's intent is easy to decipher.",
              "$ref": "#/definitions/CommandString"
            },
            {
              "$ref": "#/definitions/CommandNoop"
            },
            {
              "title": "Action",
              "description": "An advanced command configuration.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "command"
              ],
              "propertyNames": {
                "enum": [
                  "alias",
                  "command",
                  "description",
                  "in_envs",
                  "load_secrets",
                  "not_in_envs",
                  "shell_expansion",
                  "skip_before_hooks"
                ]
              },
              "properties": {
                "alias": {
                  "title": "Alias",
                  "description": "An action can have one alias. If the first argument to `ops` is not a builtin or an action name, `ops` will look for an alias that matches the argument.",
                  "markdownDescription": "An action can have one alias. If the first argument to `ops` is not a builtin or an action name, `ops` will look for an alias that matches the argument.",
                  "type": "string",
                  "pattern": "^[\\w-]+$"
                },
                "command": {
                  "title": "Command",
                  "description": "A command or script to run when the action is executed.",
                  "oneOf": [
                    {
                      "$ref": "#/definitions/CommandString"
                    },
                    {
                      "$ref": "#/definitions/CommandNoop"
                    }
                  ]
                },
                "description": {
                  "title": "Description",
                  "description": "A summary of the command's intent and its usage. When a user runs, `ops help`, the text here will display beside the command's name; otherwise, it will simply display the command script. It is best practice to describe your command.",
                  "markdownDescription": "A summary of the command's intent and its usage. When a user runs, `ops help`, the text here will display beside the command's name; otherwise, it will simply display the command script. It is best practice to describe your command.",
                  "type": "string",
                  "minLength": 1,
                  "default": "DESCRIBE ME!"
                },
                "in_envs": {
                  "description": "Limit possibly destructive actions to only being used in certain environments. If the action is excuted in an environment missing from this list, it will exit with an error.",
                  "$ref": "#/definitions/EnvList"
                },
                "load_secrets": {
                  "title": "LoadSecrets",
                  "$ref": "#/definitions/LoadSecrets"
                },
                "not_in_envs": {
                  "description": "Prevent possibly destructive actions from being used in certain environments. If the action is excuted in an environment within this list, it will exit with an error.",
                  "$ref": "#/definitions/EnvList"
                },
                "shell_expansion": {
                  "description": "By default, `ops` executes actions with shell expansion, which means variable references are expanded, file globbing is done, and quotes behave as one would expect. However, this can get in the way sometimes. For actions like this, one can disable shell expansion, losing variable and glob interpolation and other shell features but gaining some predictability.",
                  "markdownDescription": "By default, `ops` executes actions with shell expansion, which means variable references are expanded, file globbing is done, and quotes behave as one would expect. However, this can get in the way sometimes. For actions like this, one can disable shell expansion, losing variable and glob interpolation and other shell features but gaining some predictability.",
                  "type": "boolean",
                  "default": false
                },
                "skip_before_hooks": {
                  "description": "You may have some actions that don't need to run before hooks. For example, an action that removes container images to allow a developer to force a clean build from the latest source, or free up disk space.\n\nIn this case, you can configure that action to skip the hooks.\n",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          ]
        }
      }
    },
    "dependencies": {
      "title": "Dependencies",
      "description": "Dependencies listed in the `dependencies` section of `ops.yml` are satisfied when the `ops up` command is run. Some dependencies will be un-satisfied when you run `ops down`; e.g. services will be stopped, but packages won't be uninstalled.\n\nThis feature allows developers that are new to a project to get up and running without knowing anything about the app itself. Your `ops.yml` should allow a developer to `ops up && ops start` to run an application.\n",
      "markdownDescription": "Dependencies listed in the `dependencies` section of `ops.yml` are satisfied when the `ops up` command is run. Some dependencies will be un-satisfied when you run `ops down`; e.g. services will be stopped, but packages won't be uninstalled.\n\nThis feature allows developers that are new to a project to get up and running without knowing anything about the app itself. Your `ops.yml` should allow a developer to `ops up && ops start` to run an application.\n\n_For more information, see the [Dependencies](https://github.com/nickthecook/ops/blob/main/docs/dependencies.md) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "propertyNames": {
        "enum": [
          "apk",
          "apt",
          "brew",
          "cask",
          "custom",
          "dir",
          "docker",
          "gem",
          "sshkey",
          "terraform"
        ]
      },
      "properties": {
        "apk": {
          "title": "apkPackageList",
          "description": "- Specifies that a particular package from `apk` is needed.\n- Will only run if the `apk` command is in the `$PATH` (usually only on Alpine linux).",
          "markdownDescription": "* Specifies that a particular package from `apk` is needed.\n* Will only run if the `apk` command is in the `$PATH` (usually only on Alpine linux).",
          "$ref": "#/definitions/PackageList"
        },
        "apt": {
          "title": "aptPackageList",
          "description": "- Specifies that a particular package from `apt` is needed.\n- Will only run if the `apt` executable is in the `$PATH`.\n- Can specify a version with, e.g.: `curl/7.52.1-5+deb9u7`.\n- Run `apt-cache policy curl` to get available versions.",
          "markdownDescription": "* Specifies that a particular package from `apt` is needed.\n* Will only run if the `apt` executable is in the `$PATH`.\n* Can specify a version with, e.g.: `curl/7.52.1-5+deb9u7`.\n* Run `apt-cache policy curl` to get available versions.",
          "$ref": "#/definitions/PackageList"
        },
        "brew": {
          "title": "brewPackageList",
          "description": "- Specifies that a particular `brew` package is needed.\n- Will only run if you're on a Mac.",
          "markdownDescription": "* Specifies that a particular `brew` package is needed.\n* Will only run if you're on a Mac.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageBrew"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "cask": {
          "title": "caskPackageList",
          "description": "- Specifies that a particular `brew cask` package is needed.\n- Will only run if you're on a Mac.",
          "markdownDescription": "* Specifies that a particular `brew cask` package is needed.\n* Will only run if you're on a Mac.",
          "$ref": "#/definitions/PackageList"
        },
        "custom": {
          "title": "CustomCommandList",
          "description": "- Runs the given command.\n- Can't tell if the command needs to be run or not, so always runs it on `ops up`.\n- Therefore, the command should be idempotent.\n- It's also a good idea to prevent it from printing output unless it encounters an error, to keep the ops output clean.\n",
          "markdownDescription": "* Runs the given command.\n* Can't tell if the command needs to be run or not, so always runs it on `ops up`.\n* Therefore, the command should be [**idempotent**](https://en.wikipedia.org/wiki/Idempotence).\n* It's also a good idea to prevent it from printing output unless it encounters an error, to keep the ops output clean.\n",
          "type": "array",
          "items": {
            "description": "",
            "oneOf": [
              {
                "$ref": "#/definitions/CommandString",
                "description": "An idempotent command or script to run as a dependency when `ops up` is executed.",
                "markdownDescription": "An idempotent command or script to run as a dependency when `ops up` is executed."
              },
              {
                "$ref": "#/definitions/CommandNoop"
              }
            ]
          },
          "minItems": 1,
          "examples": [
            [
              "bundle install --quiet"
            ]
          ]
        },
        "dir": {
          "title": "DirectoryList",
          "description": "This dependency will ensure the given directory is created when you run `ops up`. This is handy for directories your app needs, but which contain no checked-in files, since `git` won't save empty directories.",
          "$ref": "#/definitions/PathList"
        },
        "docker": {
          "title": "dockerRepository",
          "description": "- Specifies that this repo includes a directory with the given name (e.g. `deps/mysql`) that includes a `docker-compose.yml` file.\n- `ops` will change to the given directory and use `docker-compose` to start, stop, and check the status of this service as needed.\n",
          "markdownDescription": "* Specifies that this repo includes a directory with the given name (e.g. `deps/mysql`) that includes a `docker-compose.yml` file.\n* `ops` will change to the given directory and use `docker-compose` to start, stop, and check the status of this service as needed.\n",
          "$ref": "#/definitions/PathList"
        },
        "gem": {
          "title": "gemPackageList",
          "description": "- Installs the gem with the given name.\n- By default, runs `gem install ...`, but can be configured to use `sudo gem install` or `gem install --user-install` (see below).\n",
          "markdownDescription": "* Installs the gem with the given name.\n* By default, runs `gem install ...`, but can be configured to use `sudo gem install` or `gem install --user-install` (_see below_).\n",
          "$ref": "#/definitions/PackageList",
          "examples": [
            [
              "ejson"
            ]
          ]
        },
        "sshkey": {
          "title": "sshKeyList",
          "description": "This dependency will create an SSH key pair with key size 4096 and key algorithm `rsa` at `keys/$environment/user@host` and `keys/$environment/user@host.pub`. It will also add it to your SSH agent, if `SSH_AUTH_SOCK` is set, with a lifetime of 3600 seconds (one hour).\n\nThe key comment, which is visible in the output of `ssh-add -l`, will be set to the name of the directory that contains `ops.yml`. For example, if the directory is named `heliograf`, you would see the following output:\n",
          "markdownDescription": "This dependency will create an SSH key pair with key size 4096 and key algorithm `rsa` at `keys/$environment/user@host` and `keys/$environment/user@host.pub`. It will also add it to your SSH agent, if `SSH_AUTH_SOCK` is set, with a lifetime of 3600 seconds (one hour).\n\nThe key comment, which is visible in the output of `ssh-add -l`, will be set to the name of the directory that contains `ops.yml`. For example, if the directory is named `heliograf`, you would see the following output:\n\n```shell\n$ ssh-add -l\n2048 SHA256:7n9WwisFkDtemOx8O/+D33myKpjOvrjx3PZcNb9y6/Y heliograf (RSA)\n2048 SHA256:Z6oEPBIoBrHv/acYiBGBRYLe2sEONV17tDor3h5eNtc certitude (RSA)\n```\n\nThis output shows that one key from a project called `heliograf` and one key from a project called `certitude` have been loaded.\n",
          "$ref": "#/definitions/PathList",
          "examples": [
            [
              "keys/$environment/user@host"
            ]
          ]
        },
        "terraform": {
          "title": "terraformHandler",
          "type": "array",
          "description": "[DEPRECATED] This feature has been removed as of version `0.2.6`.",
          "markdownDescription": "### `DEPRECATED`\n_This feature has been removed as of version `0.2.6`._\n",
          "$ref": "#/definitions/Deprecated"
        }
      }
    },
    "forwards": {
      "title": "ForwardMap",
      "description": "Sometimes a project is complex enough to split up into multiple directories. In this case, you may have `ops.yml` files in several places, but still want to provide easy access to these actions from the top-level directory.\n\nWith this config, `ops app test` will have the same effect as running `ops test` from the `app` directory. `ops inf deploy` will be the same as `cd infrastructure && ops deploy`.\n\nWhen a command is forwarded to another directory, no config, secrets, or environment variables are set based on the current directory's `ops.yml`, and no hooks are run from the current directory's `ops.yml`.\n\nIf you want access to the top-level directory's config or secrets from the subdirectory, link it in the subdirectory's `ops.yml`.\n",
      "markdownDescription": "Sometimes a project is complex enough to split up into multiple directories. In this case, you may have `ops.yml` files in several places, but still want to provide easy access to these actions from the top-level directory.\n\nWith this config, `ops app test` will have the same effect as running `ops test` from the `app` directory. `ops inf deploy` will be the same as `cd infrastructure && ops deploy`.\n\nWhen a command is forwarded to another directory, no config, secrets, or environment variables are set based on the current directory's `ops.yml`, and no hooks are run from the current directory's `ops.yml`.\n\nIf you want access to the top-level directory's config or secrets from the subdirectory, link it in the subdirectory's `ops.yml`:\n\n```yaml\ndependencies:\n  custom:\n    - ln -sf ../config config\n```\n\n_For more information, see the [Forwards](https://github.com/nickthecook/ops/blob/main/docs/why.md#vforwards) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^[\\w-]+$": {
          "title": "ForwardPath",
          "description": "The path of the forwarded `ops.yml` file.",
          "type": "string",
          "format": "uri-reference"
        }
      }
    },
    "hooks": {
      "title": "Hooks",
      "description": "Sometimes you want to run a command before other commands. Some examples:\n\n- You have a number of ops commands that let a developer run different test suites inside a container, and you want to make sure the container image is built beforehand.\n- You have some configuration that needs to happen when the software execution environment changes (e.g. going from dev to staging).\n\nIn this case, you can use the \"hooks feature.\n",
      "markdownDescription": "Sometimes you want to run a command before other commands. Some examples:\n\n* You have a number of ops commands that let a developer run different test suites inside a container, and you want to make sure the container image is built beforehand.\n* You have some configuration that needs to happen when the software execution environment changes (_e.g. going from `dev` to `staging`_).\n\nIn this case, you can use the `hooks` feature.\n\n_For more information, see the [Hooks](https://github.com/nickthecook/ops/blob/main/docs/hooks.md) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "propertyNames": {
        "enum": [
          "before"
        ]
      },
      "properties": {
        "before": {
          "title": "BeforeHooks",
          "description": "A series of hooks that run before actions. They do not run before builtins like `up` or `exec`.\n\n`before` hooks are always executed before secrets are loaded. If you would like a before hook to have access to secrets, create an action with `load_secrets: true` and call the action from a before hook.\n",
          "markdownDescription": "A series of hooks that run before actions. They do not run before builtins like `up` or `exec`.\n\n`before` hooks are always executed before secrets are loaded. If you would like a before hook to have access to secrets, create an action with `load_secrets: true` and call the action from a before hook.\n",
          "type": "array",
          "items": {
            "description": "A valid command to run.",
            "$ref": "#/definitions/NonEmptyString"
          },
          "minItems": 1
        }
      }
    },
    "min_version": {
      "title": "Minimum Version",
      "description": "A valid semantic version. If an older version of `ops` (v0.12.0 or later) encounters this file, it will print a message and exit.\n\nThe versions you can set for `min_version` will depend on the `revision` of `ops.yaml` you've specified\u2014if specified at all.\n",
      "markdownDescription": "A valid [semantic version](https://semver.org). If an older version of `ops` (_`v0.12.0` or later_) encounters this file, it will print a message like this and exit:\n\n> ```\n> ops.yml specifies minimum version of 0.12.2, but ops version is 0.12.0\n> ```\n\nThe versions you can set for `min_version` will depend on the `revision` of `ops.yaml` you've specified\u2014if specified at all.\n\n_For more information, see the [Version Checking](https://github.com/nickthecook/ops/blob/main/docs/why.md#version-checking) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "string",
      "default": "1.6.2",
      "enum": [
        "1.6.2",
        "1.6.1",
        "1.6.0",
        "1.6.0rc1",
        "1.6.0.pre.pre",
        "1.5.2",
        "1.5.0",
        "1.5.0rc1",
        "1.4.2",
        "1.4.1",
        "1.4.1rc1",
        "1.4.0",
        "1.4.0.rc1"
      ],
      "$ref": "#/definitions/SemVer"
    },
    "options": {
      "title": "Options",
      "description": "Options allow the user to change some aspects of `ops` behaviour.",
      "markdownDescription": "Options allow the user to change some aspects of `ops` behaviour.\n\n_For more information, see the [Options](https://github.com/nickthecook/ops/blob/main/docs/options.md) documentation on [GitHub](https://github.com/nickthecook/ops)._\n",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "propertyNames": {
        "enum": [
          "apt",
          "background",
          "config",
          "envdiff",
          "environment",
          "environment_aliases",
          "exec",
          "gem",
          "secrets",
          "sshkey"
        ]
      },
      "properties": {
        "apt": {
          "title": "AptOptions",
          "description": "Affect the behaviour of `apt` dependencies.",
          "markdownDescription": "Affect the behaviour of `apt` dependencies.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "default": {
            "use_sudo": false
          },
          "propertyNames": {
            "enum": [
              "use_sudo"
            ]
          },
          "properties": {
            "use_sudo": {
              "$ref": "#/definitions/UseSudo/properties/use_sudo"
            }
          }
        },
        "background": {
          "description": "Affect the behaviour of the `background` builtin.",
          "markdownDescription": "Affect the behaviour of the `background` builtin.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "default": {
            "log_file_prefix": "bg_",
            "shell": "/bin/sh"
          },
          "propertyNames": {
            "enum": [
              "log_file_prefix",
              "log_filename",
              "shell"
            ]
          },
          "properties": {
            "log_filename": {
              "title": "LogFilePrefix",
              "description": "Override the default name for the background action log file.",
              "$ref": "#/definitions/FileName"
            },
            "log_file_prefix": {
              "title": "LogFilePrefix",
              "description": "[DEPRECATED] This feature was removed as version `0.9.4`.",
              "markdownDescription": "### `DEPRECATED`\n_This feature was removed as version `0.9.4`._\n",
              "$ref": "#/definitions/Deprecated"
            },
            "shell": {
              "title": "Shell",
              "description": "[DEPRECATED] This feature was removed as version `0.9.4`.",
              "markdownDescription": "### `DEPRECATED`\n_This feature was removed as version `0.9.4`._\n",
              "$ref": "#/definitions/Deprecated"
            }
          }
        },
        "config": {
          "title": "SecretOptions",
          "description": "Affect how configs are interpreted.",
          "type": "object",
          "minProperties": 1,
          "properties": {
            "path": {
              "title": "SecretsPath",
              "description": "Override the config file location (defaults to `./config/<environment>/config.json`).",
              "markdownDescription": "Override the config file location (_defaults to `./config/<environment>/config.json`_).",
              "$ref": "#/definitions/Path"
            }
          }
        },
        "envdiff": {
          "title": "EnvDiffOptions",
          "description": "Affect the behaviour of `ops envdiff`.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "default": {
            "ignored_keys": null
          },
          "patternProperties": {
            "^\\w+$": {
              "title": "IgnoredKeys",
              "description": "If there's a key you know should be in some environments and not in others, put it in the `envdiff.ignored_keys` option and `ops envdiff` won't mention it again.",
              "markdownDescription": "If there's a key you know should be in some environments and not in others, put it in the `envdiff.ignored_keys` option and `ops envdiff` won't mention it again.",
              "type": "array",
              "items": {
                "description": "Any key within your `config.json/#/environment` and/or `secrets.ejson/#/environment`.",
                "$ref": "#/definitions/NameString",
                "minItems": 1,
                "uniqueItems": true
              }
            }
          }
        },
        "environment": {
          "title": "EnvironmentMap",
          "description": "Statically or dynamically set global environment variables, with each key serving as a variable's name.\n\nThe values of these variables are not interpreted by the shell before being set, so variable references like `$environment` will appear literally in the value of the variable.\n",
          "markdownDescription": "Statically or dynamically set global environment variables, with each key serving as a variable's name.\n\n> **NOTE:** _The values of these variables are not interpreted by the shell before being set, so variable references like `$environment` will appear literally in the value of the variable._\n",
          "type": "object",
          "minProperties": 1,
          "patternProperties": {
            "^\\w+$": {
              "title": "EnvVarValue",
              "description": "Either a static value, or a command enclosed between `\"\\\\`...\\\\`\"`.",
              "markdownDescription": "Either a static value, or a command enclosed between `` \"`...`\" ``.",
              "type": "string"
            }
          }
        },
        "environment_aliases": {
          "title": "EnvironmentAliasList",
          "description": "Different software systems use different environment variables to determine the software execution environment. E.g. Ruby on Rails uses `RAILS_ENV`. Thus, `ops` allows the user to specify which variables should also be set to the name of the software environment.\n\nIf any `environment_aliases` are specified in `ops.yml`, `ops` will not change the value of `$environment` unless it is listed as well.\n\n(`ops` will always use `$environment` to detect the software execution environment; `environment_aliases` just makes `ops` set other variables to match it.)\n",
          "markdownDescription": "Different software systems use different environment variables to determine the software execution environment. E.g. Ruby on Rails uses `RAILS_ENV`. Thus, `ops` allows the user to specify which variables should also be set to the name of the software environment.\n\nIf any `environment_aliases` are specified in `ops.yml`, `ops` will not change the value of `$environment` unless it is listed as well.\n\n> NOTE: _`ops` will always use `$environment` to detect the software execution environment; `environment_aliases` just makes `ops` set other variables to match it._\n",
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "examples": [
            [
              "RAILS_ENV",
              "RACK_ENV"
            ]
          ],
          "items": {
            "description": "The name of an environment variable.",
            "$ref": "#/definitions/NameString"
          }
        },
        "exec": {
          "title": "ExecOptions",
          "description": "Affect the behaviour of `ops exec`.",
          "type": "object",
          "minProperties": 1,
          "properties": {
            "load_secrets": {
              "$ref": "#/definitions/LoadSecrets"
            }
          }
        },
        "gem": {
          "title": "GemOptions",
          "description": "Affect the behaviour of `gem` dependencies.",
          "markdownDescription": "Affect the behaviour of `gem` dependencies.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "default": {
            "user_install": true,
            "use_sudo": false
          },
          "propertyNames": {
            "enum": [
              "use_sudo",
              "user_install"
            ]
          },
          "properties": {
            "user_install": {
              "title": "UserInstall",
              "description": "If `true`, causes `ops up` to run `gem install --user-install ejson`.",
              "type": "boolean",
              "default": false
            },
            "use_sudo": {
              "$ref": "#/definitions/UseSudo/properties/use_sudo"
            }
          }
        },
        "secrets": {
          "title": "SecretOptions",
          "description": "Affect how secrets are interpreted.",
          "type": "object",
          "minProperties": 1,
          "properties": {
            "path": {
              "title": "SecretsPath",
              "description": "Override the secrets file location (defaults to `./config/<environment>/secrets.json`).",
              "markdownDescription": "Override the secrets file location (_defaults to `./config/<environment>/secrets.json`_).",
              "$ref": "#/definitions/Path"
            }
          }
        },
        "sshkey": {
          "title": "SshKeyOptions",
          "description": "Affect how SSH keys are generated.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "default": {
            "passphrase": "p@ssw0rd",
            "key_size": 4096
          },
          "propertyNames": {
            "enum": [
              "add_keys",
              "key_algo",
              "key_file_comment",
              "key_lifetime",
              "key_size",
              "passphrase",
              "passphrase_var"
            ]
          },
          "properties": {
            "add_keys": {
              "title": "AddKeys",
              "description": "If `false`, disables adding the SSH key to `ssh-agent`.",
              "markdownDescription": "If `false`, disables adding the SSH key to `ssh-agent`.",
              "type": "boolean",
              "default": false
            },
            "key_algo": {
              "title": "KeyAlgorithm",
              "description": "[DEPRECATED] This feature was removed from versions `0.8.2` and onward until `1.14.0`.",
              "markdownDescription": "### `DEPRECATED`\n_This feature was removed from versions `0.8.2` and onward until `1.14.0`._\n",
              "$ref": "#/definitions/Deprecated"
            },
            "key_file_comment": {
              "title": "KeyFileComment",
              "description": "An optional comment for the SSH key.",
              "type": "string",
              "minLength": 0
            },
            "key_lifetime": {
              "title": "KeyLifetime",
              "description": "The duration, in seconds, at which the SSH key will be removed from `ssh-agent`.",
              "type": "integer",
              "minimum": 0,
              "default": 3600
            },
            "key_size": {
              "title": "KeyAlgorithm",
              "description": "The size at which the SSH key will be generated.\n\n_With the \"ed25519\" algorithm, `key_size` can still be specified, but will be ignored by `ssh-keygen`, since all keys for that algorithm are 256 bits._\n",
              "markdownDescription": "The size at which the SSH key will be generated.\n\n> **NOTE:** _With the `ed25519` algorithm, `key_size` can still be specified, but will be ignored by `ssh-keygen`, since all keys for that algorithm are 256 bits._\n",
              "type": "integer",
              "enum": [
                512,
                1024,
                2048,
                4096
              ],
              "minimum": 512,
              "maximum": 4096,
              "default": 4096
            },
            "passphrase": {
              "title": "KeyPassphrase",
              "description": "A passphrase to generate the SSH key with.",
              "type": "string"
            },
            "passphrase_var": {
              "title": "PassphraseVar",
              "description": "The name of an environment variable containing the passphrase to generate the SSH key with.",
              "type": "string",
              "pattern": "^\\w+$"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CommandString": {
      "default": "echo \"hello, world\"",
      "examples": [
        "terraform init",
        "docker-compose up"
      ],
      "$ref": "#/definitions/NonEmptyString",
      "title": "Command String"
    },
    "CommandNoop": {
      "title": "No-Op Command",
      "description": "If `true`, executes the command as a `no-op` that exits `0`. If `false`, the `no-op` will always fail.",
      "markdownDescription": "If `true`, executes the command as a `no-op` that exits `0`. If `false`, the `no-op` will always fail.",
      "type": "boolean",
      "default": true
    },
    "Deprecated": {
      "title": "Deprecated",
      "default": null,
      "examples": [],
      "not": {
        "anyOf": [
          {
            "type": "array"
          },
          {
            "type": "boolean"
          },
          {
            "type": "integer"
          },
          {
            "type": "null"
          },
          {
            "type": "number"
          },
          {
            "type": "object"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "EnvList": {
      "title": "Environment List",
      "type": "array",
      "items": {
        "title": "Environment",
        "description": "A list of environment names.",
        "$ref": "#/definitions/NameString"
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "FileName": {
      "title": "File Name",
      "type": "string",
      "pattern": "^(?!.{256,})(?!(aux|clock\\$|con|nul|prn|com[1-9]|lpt[1-9])(?:$|\\.))[^ ][ \\.\\w-$()+=[\\];#@~,&']+[^\\. ]$",
      "minLength": 1
    },
    "LoadSecrets": {
      "description": "If `true`, items in `secrets.ejson` will be loaded before execution, allowing said items to be referenced in the configuration.",
      "type": "boolean",
      "default": false
    },
    "NameString": {
      "title": "Name String",
      "type": "string",
      "pattern": "^[\\w-]+$"
    },
    "NonEmptyString": {
      "title": "Non-Empty String",
      "type": "string",
      "minLength": 1
    },
    "PackageList": {
      "title": "Package List",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PackageVersioned"
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "PackageBrew": {
      "title": "Brew Package",
      "description": "The name of a `brew` package. If you need to specify a version, include it after the name, delimited by an `@` symbol.",
      "markdownDescription": "The name of a `brew` package. If you need to specify a version, include it after the name, delimited by an `@` symbol.",
      "type": "string",
      "pattern": "^\\b[\\w:.+-]+\\b(@\\b[\\d.]+\\b[\\w.+-]*\\b)?$",
      "examples": [
        "ruby",
        "openssl@"
      ]
    },
    "PackagePip": {
      "title": "Pip Package",
      "description": "The name of a `pip` package. If you need to specify a version, include it after the name, delimited by `==`.",
      "markdownDescription": "The name of a `pip` package. If you need to specify a version, include it after the name, delimited by `==`.",
      "type": "string",
      "pattern": "^\\b[\\w:.+-]+\\b(==\\b[\\d.]+\\b[\\w.+-]*\\b)?$",
      "examples": [
        "semver",
        "ruamel.yaml==0.17.26"
      ]
    },
    "PackageVersioned": {
      "title": "Package",
      "description": "The name of a package. If you need to specify a version, include it after the name, delimited by a space.",
      "markdownDescription": "The name of a package. If you need to specify a version, include it after the name, delimited by a space.",
      "type": "string",
      "pattern": "^\\b[\\w@:.+-]+\\b( \\b[\\d.]+\\b[\\w.+-]*\\b)?$",
      "examples": [
        "ruby",
        "openssl 0.8.0"
      ]
    },
    "Path": {
      "title": "Path",
      "type": "string",
      "format": "uri-reference"
    },
    "PathList": {
      "title": "Path List",
      "type": "array",
      "items": {
        "allOf": [
          {
            "description": "A valid filepath."
          },
          {
            "$ref": "#/definitions/Path"
          }
        ]
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "SemVer": {
      "title": "Semantic Version",
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)(?:\\.(0|[1-9]\\d*)(?:\\.(0|[1-9]\\d*)(?:[.-]([\\dA-z-]+(?:\\.[\\dA-z-]+)*)|)(\\+[\\dA-z-]+|)|)|)$"
    },
    "UseSudo": {
      "properties": {
        "use_sudo": {
          "title": "UseSudo",
          "description": "If `false`, causes `ops up` to install the dependency's packages without `sudo`.",
          "type": "boolean",
          "default": true
        }
      }
    }
  }
}